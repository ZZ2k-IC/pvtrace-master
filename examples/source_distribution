import matplotlib.pyplot as plt
import numpy as np

# Data from your table - rearranged in ascending angle order
angles = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 64.5, 67, 71.5, 76, 80.5, 85, 90]
power = np.array([145.5, 144.5, 146.8, 140.8, 135.1, 131.8, 130.8, 128.8, 128, 124.3, 111.5, 103.9, 91.1, 84.7, 77.1, 60.9, 59.1, 46, 38.5, 10])-10

index = 2.32
angles_rad = np.radians(angles)  # Convert to radians
sin_theta1 = np.sin(angles_rad)
sin_theta2 = sin_theta1 / index
angles2_rad = np.arcsin(sin_theta2)

angles2 = np.degrees(angles2_rad)  # Convert back to degrees

power2 = power * (index**2)

# Sort the data by angle for proper line connection
sorted_data1 = sorted(zip(angles, power))
sorted_angles1, sorted_power1 = zip(*sorted_data1)

sorted_data2 = sorted(zip(angles2, power2))
sorted_angles2, sorted_power2 = zip(*sorted_data2)


# Create smooth angle array for cosine function
angle_smooth = np.linspace(0, 90, 1000)
angle_smooth2 = np.linspace(0, max(angles2), 1000)

# Convert to radians for cosine calculation
angle_rad = np.radians(angle_smooth)
angle_rad2 = np.radians(angle_smooth2)
cosine_power = 170 * np.cos(angle_rad)
cosine_power2 = 170 * (index**2) * np.cos(angle_rad2)

# Create the plot
plt.figure(figsize=(12, 6))
plt.plot(sorted_angles1, sorted_power1, 'bo-', linewidth=2, markersize=6, label='Original angles in air(θ₁)')
#plt.plot(sorted_angles2, sorted_power2, 'go-', linewidth=2, markersize=6, label=f"Transformed angles in material(θ₂) with n = {index}")
plt.plot(angle_smooth, cosine_power, 'r-', linewidth=2, label='Fitted lambertian')
#plt.plot(angle_smooth2, cosine_power2, 'm-', linewidth=2, label=f"Transformed lambertian in material(θ₂) with n = {index}")
plt.xlabel('Angle (degrees)')
plt.ylabel('Power')
plt.title('Source Distribution: Power vs Angle')
plt.grid(True, alpha=0.3)

plt.legend()
# Add some styling
plt.tight_layout()
plt.show()

# Optional: Save the plot
# plt.savefig('source_distribution.png', dpi=300, bbox_inches='tight')